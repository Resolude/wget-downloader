#!/usr/bin/env bash

USAGE="Usage: $(basename "$0") [OPTION]... FILE";
VERSION=1.1.1

# Variable declarations
series_name="";
season=1;
episode=1;

# Program arguments (short)
# Single colon indicates mandatory option to argument
SHORT=s:e:n:v
# Program arguments (long)
LONG=season:,episode:,name:,version

# Error codes
E_INVALID_ARGS=1;
E_MISSING_FILE=2;
E_EMPTY_FILE=3; 
E_GETOPT_FAIL=4;
E_MISS_DEP=5;

# Regex for capturing the episode number from the URL
UNIQ_FILE_NUM_REGEX="([0-9]+)\.mp4$";
# Regex for capturing the episode number (HD) from the URL
UNIQ_FILE_NUM_HD_REGEX="([0-9]+)_hd\.mp4$";
# Regex for matching against invalid directory names
INVALID_DIR_REGEX="/";
# Regex matching line containing only numbers
NUMERIC_LINE_REGEX="^[0-9]+$";

# Checks if carriage returns are used by reading the first line of the file
# passed via argument to the function
is_dos_file() {
    [[ $(head -1 "$1") == *$'\r' ]];
}

# Validate series name input against existing dir/file or illegal chars
# Return 1 when illegal char
# Return 2 when file/dir exists matching given series name
validate_series_name() {
    if [[ "$1" =~ $INVALID_DIR_REGEX ]]; then
        return 1;
    fi

    if [[ -e "$1" ]]; then
        return 2;
    fi

    return 0;
}

# Gets the series name from the user.
# Auto-retry if an invalid name is used or if the name matches and existing directory.
get_series_name() {
    read -r -p "Enter series name: " series_name;
    validate_series_name "$series_name";
    local val_ret=$?;

    if [[ "$val_ret" -eq 1 ]]; then
        echo "Error: Invalid series name. Remove illegal characters and try again.";
        get_series_name
    fi

    if [[ "$val_ret" -eq 2 ]]; then
        echo "Series name matches existing file or directory. Try again.";
        get_series_name
    fi
}

# No arguments passed, print usage and fail
if [[ $# -eq 0 ]]; then
    echo "$USAGE";
    exit "$E_INVALID_ARGS";
fi

# getopt not available, fail
getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
    echo "$0: Fatal error. getopt --test failed.";
    exit "$E_GETOPT_FAIL";
fi

# Check if wget is installed
if ! which wget > /dev/null 2>&1; then
    echo "$0: Fatal error, missing wget. Please install it and retry.";
    exit "$E_MISS_DEP";
fi

if ! PARSED=$(getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@"); then
    # Wrong argument error has been printed to stdout, time to fail
    exit "$E_INVALID_ARGS";
fi

eval set -- "$PARSED";

while true; do
    case "$1" in
        -s|--season)
            if [[ ! "$2" =~ $NUMERIC_LINE_REGEX ]]; then
                echo "$0: Invalid season number.";
                exit "$E_INVALID_ARGS";
            fi

            season="$2";

            shift 2;
            ;;
        -e|--episode)
            if [[ ! "$2" =~ $NUMERIC_LINE_REGEX ]]; then
                echo "$0: Invalid episode number.";
                exit "$E_INVALID_ARGS";
            fi

            episode="$2";

            shift 2;
            ;;
        -n|--name)
            validate_series_name "$2";
            val_ret=$?;

            if [[ "$val_ret" -eq 1 ]]; then
                echo "$0: Invalid series name. Remove illegal characters.";
                exit "$E_INVALID_ARGS";
            fi

            if [[ "$val_ret" -eq 2 ]]; then
                echo "$0: Series name matches existing file or directory.";
                exit "$E_INVALID_ARGS";
            fi

            series_name="$2";

            shift 2;
            ;;
        -v|--version)
            echo "$VERSION";
            exit 0;

            shift;
            ;;
        --)
            shift;
            break;
            ;;
        *)
            echo "$0: Fatal error while parsing arguments. Report this bug.";
            exit "$E_INVALID_ARGS";
            ;;
    esac
done

# No input file was provided
if [[ $# -eq 0 ]]; then
    echo "$0: An input file is required.";
    exit "$E_INVALID_ARGS";
fi

# Validate input file
# TODO: Validate URLs in the input file
# If the input file doesn't exist or is empty
if [[ ! -s "$1" ]]; then
    # If the input file doesn't exist
    if [[ ! -f "$1" ]]; then
        echo "$0: Cannot locate file $1.";
        exit "$E_MISSING_FILE";
    else # File exists but is empty
        echo "$0: File $1 is empty. Nothing to do.";
        exit "$E_EMPTY_FILE";
    fi
fi

# No name passed via argument, get it via prompt
if [[ "$series_name" == "" ]]; then
    get_series_name;
fi

# Create parent and first season directories
mkdir -p ./"$series_name"/s"$season"/;

# Strips carriage returns in place if they're in the input file
if is_dos_file "$1"; then
    sed -i 's/\r$//' "$1";
fi

# While the input file has another URL
while IFS= read -r line || [[ -n "$line" ]]; do
    # If the input is a blank line, increment season
    if [[ "$line" == "" ]]; then
        season=$((season+1));
        mkdir -p ./"$series_name"/s"$season"/;
        # Restart episode counter for new season
        episode=1;
        # Get another line from the file, nothing more to do
        continue;
    fi

    # Bash regex to capture the episode number
    # If no match, set uniq_file_num to -1 so we know later that we didn't match
    if [[ "$line" =~ $UNIQ_FILE_NUM_REGEX ]]; then
        uniq_file_num="${BASH_REMATCH[1]}";
    elif [[ "$line" =~ $UNIQ_FILE_NUM_HD_REGEX ]]; then
        uniq_file_num="${BASH_REMATCH[1]}";
    else
        uniq_file_num=-1;
    fi

    # Generate the file name with proper season/epsiode labeling e.g. 01, 02, 03
    if [[ $uniq_file_num -ne -1 ]]; then
        filename=$(printf "$series_name-s%02de%02d_%d.mp4\n" "$season" "$episode" "$uniq_file_num");
    else
        # We didn't find an episode number, don't include it in the file name
        filename=$(printf "$series_name-s%02de%02d.mp4\n" "$season" "$episode");
    fi

    # Get the file, appending non-verbose logging to log.txt, running in background
    # and specifying the output file path
    wget -nv -a log.txt -b -O ./"$series_name"/s"$season"/"$filename" "$line";

    episode=$((episode+1));
done < "$1"

exit 0
